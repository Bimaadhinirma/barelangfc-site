---
import { Button } from "@/components/ui/button";
import Layout from "../../layouts/Layout.astro";
import { ArrowRight, Calendar } from "lucide-react";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { getCollection } from "astro:content";
import { Link } from "@/components/link";
import { Image } from "astro:assets";
// Define page size
interface Page {
  currentPage: number;
  lastPage: number;
  data: any[];
  total: number;
}
// Create paginated data
export async function getStaticPaths({ paginate }: any) {
  const allNews = await getCollection("achievement");
  const sortedNews = allNews.sort((a, b) => {
    return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
  });

  return paginate(sortedNews, { pageSize: 6 });
}

// Get the paginated data for the current page
const { page } = Astro.props as {
  page: Page;
};
const start = (page.currentPage - 1) * 1 + 1;
const end = Math.min(start + page.data.length - 1, page.total);
// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
  <div class="container py-12 md:py-16">
    <div class="space-y-4 text-center mb-10">
      <h1 class="text-4xl font-bold">Our Achievements</h1>
      <p class="text-xl text-gray-500 max-w-3xl mx-auto">
        Celebrating our milestones, breakthroughs, and recognitions in the field
        of robotics
      </p>
    </div>

    {/* Achievements Grid */}
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {
        page.data.map(({ id, data }) => (
          <Card key={id} className="flex flex-col overflow-hidden shadow-none py-0">
            <div class="relative h-48">
              <Image
                src={data.img}
                alt={data.title}
                class="object-cover w-full h-full"
              />
              <div class="absolute top-2 right-2">
                <Badge
                  variant="secondary"
                  className="bg-blue-100 text-blue-800 hover:bg-blue-200"
                >
                  {data.category}
                </Badge>
              </div>
            </div>
            <CardContent className="flex-grow p-4">
              <div class="flex items-center gap-2 text-sm text-gray-500 mb-2">
                <Calendar className="h-4 w-4" />
                <span>{data.date.toDateString()} - {data.date_end.toDateString()}</span>
              </div>
              <h3 class="font-bold text-lg mb-2">{data.title}</h3>
              <p class="text-sm text-gray-600 line-clamp-3">
                {data.description}
              </p>
            </CardContent>
            <CardFooter className="p-4 pt-0">
              <Link
                href={`/achievements/${id}`}
                variant="outline"
                className="flex items-center justify-center w-full"
              >
                View Details
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </CardFooter>
          </Card>
        ))
      }
    </div>

    {/* Pagination */}
    <div class="flex justify-center mt-10">
      <nav class="flex items-center gap-1">
        <Link
          variant="outline"
          size="icon"
          disabled={page.currentPage === 1}
          href={`/achievements${page.currentPage > 1 ? (page.currentPage === 2 ? "" : `/page/${page.currentPage - 1}`) : ""}`}
          className="inline-flex items-center"
        >
          <span class="sr-only">Previous page</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            class="h-4 w-4"
          >
            <path d="m15 18-6-6 6-6"></path>
          </svg>
        </Link>

        {
          Array.from({ length: page.lastPage }, (_, i) => i + 1).map(
            (pageNum) => (
              <a href={pageNum === 1 ? "/news" : `/news/${pageNum}`}>
                <Button
                  variant="outline"
                  size="sm"
                  className={
                    pageNum === page.currentPage
                      ? "bg-primary text-primary-foreground hover:bg-primary/90"
                      : ""
                  }
                >
                  {pageNum}
                </Button>
              </a>
            ),
          )
        }

        <Link
          variant="outline"
          size="icon"
          disabled={page.currentPage === page.lastPage}
          href={`/achievements${page.currentPage < page.lastPage ? (page.currentPage + 1 === 1 ? "" : `/${page.currentPage + 1}`) : ""}`}
          className="inline-flex items-center"
        >
          <span class="sr-only">Next page</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            class="h-4 w-4"
          >
            <path d="m9 18 6-6-6-6"></path>
          </svg>
        </Link>
      </nav>
    </div>

    <div class="text-center text-sm text-gray-500 mt-4">
      Showing {start} to {end} of {page.total} articles
    </div>
  </div>
</Layout>
